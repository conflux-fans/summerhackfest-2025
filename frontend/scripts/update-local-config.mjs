#!/usr/bin/env node
/**
 * Update frontend environment with latest local deployment
 * Reads deployment info from hardhat-deploy and updates .env.local
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { ethers } from 'ethers';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const FRONTEND_DIR = path.dirname(__dirname);
const PROJECT_ROOT = path.dirname(FRONTEND_DIR);
const DEPLOYMENTS_DIR = path.join(PROJECT_ROOT, 'deployments', 'localhost');
const ENV_LOCAL_PATH = path.join(FRONTEND_DIR, '.env.local');

// Helper: call new getPersonHash (using PersonBasicInfo struct with fullNameHash)
async function getPersonHashFromBasicInfo(deepFamily, basicInfo) {
  // First compute fullNameHash from fullName
  const fullNameHash = await deepFamily.getFullNameHash(basicInfo.fullName);

  return await deepFamily.getPersonHash({
    fullNameHash: fullNameHash,
    isBirthBC: basicInfo.isBirthBC,
    birthYear: basicInfo.birthYear,
    birthMonth: basicInfo.birthMonth,
    birthDay: basicInfo.birthDay,
    gender: basicInfo.gender,
  });
}

async function updateLocalConfig() {
  try {
    // Check if localhost deployments exist
    if (!fs.existsSync(DEPLOYMENTS_DIR)) {
      console.log('‚ùå No localhost deployments found. Run `npm run deploy:local` first.');
      process.exit(1);
    }

    // Read deployment info
    const deepFamilyPath = path.join(DEPLOYMENTS_DIR, 'DeepFamily.json');
    if (!fs.existsSync(deepFamilyPath)) {
      console.log('‚ùå DeepFamily contract not deployed. Run `npm run deploy:local` first.');
      process.exit(1);
    }

    const deepFamilyDeployment = JSON.parse(fs.readFileSync(deepFamilyPath, 'utf8'));
    const contractAddress = deepFamilyDeployment.address;

    console.log(`üìÑ Found DeepFamily contract at: ${contractAddress}`);

    // Connect to contract and get root person hash
    const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');
    const deepFamily = new ethers.Contract(contractAddress, deepFamilyDeployment.abi, provider);

    // Demo root person info (same as in check-root.js)
    const demo = {
      fullName: "DemoRoot",
      isBirthBC: false,
      birthYear: 1970,
      birthMonth: 1,
      birthDay: 1,
      gender: 1,
      birthPlace: "US-CA-Los Angeles",
    };

    const rootPersonHash = await getPersonHashFromBasicInfo(deepFamily, demo);
    console.log(`üîë DemoRoot hash: ${rootPersonHash}`);

    // Read current .env.local or create from template
    let envContent = '';
    let isNewFile = false;

    if (fs.existsSync(ENV_LOCAL_PATH)) {
      envContent = fs.readFileSync(ENV_LOCAL_PATH, 'utf8');
      console.log('üìù Updating existing .env.local');
    } else {
      // Create from .env.example
      const envExamplePath = path.join(FRONTEND_DIR, '.env.example');
      if (fs.existsSync(envExamplePath)) {
        envContent = fs.readFileSync(envExamplePath, 'utf8');
        console.log('üìÑ Creating .env.local from .env.example');
        isNewFile = true;
      } else {
        envContent = `# Local development environment
# Auto-generated by update-local-config.mjs

`;
        isNewFile = true;
      }
    }

    // Update or add contract address
    const updates = {
      'VITE_RPC_URL': 'http://127.0.0.1:8545',
      'VITE_CONTRACT_ADDRESS': contractAddress,
      'VITE_ROOT_PERSON_HASH': rootPersonHash,
      'VITE_ROOT_VERSION_INDEX': '1'
    };

    // Apply updates
    let updatedContent = envContent;
    for (const [key, value] of Object.entries(updates)) {
      const regex = new RegExp(`^${key}=.*$`, 'm');
      if (regex.test(updatedContent)) {
        updatedContent = updatedContent.replace(regex, `${key}=${value}`);
        console.log(`‚úÖ Updated ${key}=${value}`);
      } else {
        updatedContent += `\n${key}=${value}`;
        console.log(`‚ûï Added ${key}=${value}`);
      }
    }

    // Write updated content
    fs.writeFileSync(ENV_LOCAL_PATH, updatedContent);
    
    if (isNewFile) {
      console.log('\nüéâ Created .env.local with local deployment configuration!');
    } else {
      console.log('\nüéâ Updated .env.local with latest deployment addresses!');
    }
    
    console.log('\nüìã Current configuration:');
    console.log(`   RPC URL: http://127.0.0.1:8545`);
    console.log(`   Contract: ${contractAddress}`);
    console.log(`   Root Hash: ${rootPersonHash}`);
    
    console.log('\nüöÄ You can now start the frontend with: npm run dev');

  } catch (error) {
    console.error('‚ùå Error updating local config:', error.message);
    process.exit(1);
  }
}

updateLocalConfig();